// Generated by dts-bundle-generator v4.2.0

export declare type Matrix = {
	a: number;
	b: number;
	c: number;
	d: number;
	tx: number;
	ty: number;
};
export declare class Transform {
	x: number;
	y: number;
	scaleX: number;
	scaleY: number;
	skewX: number;
	skewY: number;
	rotation: number;
	matrix: Matrix;
	matrixUpdated: boolean;
	equalScale: boolean;
	noScale: boolean;
	equalSkew: boolean;
	noSkew: boolean;
	updateInfo(): void;
	updateMatrix(): void;
	concat(local: Transform, global: Transform): void;
	copy(target: Transform): void;
}
export declare class Node {
	readonly globalTransform: Transform;
	readonly localTransform: Transform;
	readonly childrens: Node[];
	protected readonly hierarchy: Node[];
	parent: Node | null;
	name: string;
	protected globalTransformUpdated: boolean;
	constructor(id?: string);
	set x(value: number);
	get x(): number;
	set y(value: number);
	get y(): number;
	set scaleX(value: number);
	get scaleX(): number;
	set scaleY(value: number);
	get scaleY(): number;
	set skewX(value: number);
	get skewX(): number;
	set skewY(value: number);
	get skewY(): number;
	set rotation(value: number);
	get rotation(): number;
	addChild(node: Node): Node;
	removeChild(node: Node): void;
	updateHierarchy(): void;
	protected poke(): void;
	updateHierarchyGlobalTransform(): boolean;
	updateChildrensGlobalTransform(poked?: boolean): void;
	pokeChildrens(poked?: boolean): void;
	updateGlobalTransform(poked?: boolean): boolean;
	kill(): void;
}
export declare type Atlas = {
	[key: string]: Rect;
};
export declare type Rect = {
	x: number;
	y: number;
	width: number;
	height: number;
};
export declare class Sprite extends Node {
	texture: HTMLImageElement | null;
	protected rect: Rect | null;
	protected bounds: Rect | null;
	protected boundsUpdated: boolean;
	readonly mesh: {
		vertexes: number[];
		uv: number[];
	};
	protected meshUpdated: boolean;
	protected localVisible: boolean;
	protected localAlpha: number;
	constructor(texture?: HTMLImageElement, atlas?: Atlas, frameId?: string);
	set width(value: number);
	get width(): number;
	set height(value: number);
	get height(): number;
	set alpha(value: number);
	get alpha(): number;
	set visible(value: boolean);
	get visible(): boolean;
	setTexture(texture: HTMLImageElement, atlas?: Atlas, frameId?: string): void;
	setRect(rect: Rect): void;
	updateMesh(): void;
	updateBounds(): void;
	updateGlobalTransform(poked?: boolean): boolean;
	getBounds(): Rect | null;
}
export declare class Renderer {
	readonly stage: Node;
	sceneWidth: number;
	sceneHeight: number;
	private canvas;
	private readonly vertexData;
	private readonly indexData;
	private vertexOffset;
	private indexOffset;
	private readonly textures;
	private readonly gl;
	private readonly vertexShader;
	private readonly fragmentShader;
	private readonly vs;
	private readonly fs;
	private readonly program;
	private readonly vec2UniformLoc;
	private readonly matABCDCoordLocation;
	private readonly indexBuffer;
	private readonly vertBuffer;
	private currentTexture;
	constructor(canvas: HTMLCanvasElement);
	resize(width: number, height: number): void;
	createContext(): null | WebGLRenderingContext;
	addTexture(image: HTMLImageElement): void;
	present(): void;
	draw(childrens: Node[]): void;
	drawTriangles(): void;
}

export {};
