{"version":3,"file":"dizzy-canvas.min.js","sources":["../src/Transform.js","../src/Node.js","../src/Sprite.js","../src/Renderer.js","../src/Timer.js"],"sourcesContent":["export default class Transform {\r\n    constructor() {\r\n        this.x = 0;\r\n        this.y = 0;\r\n        this.scaleX = 1;\r\n        this.scaleY = 1;\r\n        this.skewX = 0;\r\n        this.skewY = 0;\r\n        this.rotation = 0;\r\n        this.matrix = { a: 1, b: 0, c: 0, d: 1, tx: 0, ty: 0 };\r\n        this.matrixUpdated = false;\r\n        this.equalScale = true;\r\n        this.noScale = true;\r\n        this.equalSkew = true;\r\n        this.noSkew = true;\r\n    }\r\n    updateInfo() {\r\n        this.equalScale = (this.scaleX == this.scaleX);\r\n        this.noScale = (this.scaleX == 1 && this.scaleY == 1);\r\n        this.equalSkew = (this.skewX == this.skewY);\r\n        this.noSkew = (this.skewX === 0 && this.skewY === 0);\r\n        if (this.equalSkew) {\r\n            this.rotation = this.skewX;\r\n        }\r\n    }\r\n    updateMatrix() {\r\n        if (!this.matrixUpdated) {\r\n            this.matrix.a = this.scaleX * Math.cos(this.skewY);\r\n            this.matrix.b = this.scaleX * Math.sin(this.skewY);\r\n            this.matrix.c = this.scaleY * Math.sin(-this.skewX);\r\n            this.matrix.d = this.scaleY * Math.cos(this.skewX);\r\n            this.matrix.tx = this.x;\r\n            this.matrix.ty = this.y;\r\n            this.matrixUpdated = true;\r\n        }\r\n    }\r\n    concat(local, global) {\r\n        if (global.noSkew && global.noScale) {\r\n            this.x = local.x + global.x;\r\n            this.y = local.y + global.y;\r\n            this.scaleX = local.scaleX;\r\n            this.scaleY = local.scaleY;\r\n            this.skewX = local.skewX;\r\n            this.skewY = local.skewY;\r\n            this.matrixUpdated = false;\r\n        }\r\n        else if (global.equalScale && global.noSkew) {\r\n            this.x = local.x * global.scaleX + global.x;\r\n            this.y = local.y * global.scaleY + global.y;\r\n            this.scaleX = local.scaleX * global.scaleX;\r\n            this.scaleY = local.scaleY * global.scaleY;\r\n            this.skewX = local.skewX;\r\n            this.skewY = local.skewY;\r\n            this.matrixUpdated = false;\r\n        }\r\n        else if (global.equalSkew && global.noScale) {\r\n            const sin = Math.sin(global.skewX);\r\n            const cos = Math.cos(global.skewY);\r\n            const posX = local.x * cos - local.y * sin;\r\n            const posY = local.x * sin + local.y * cos;\r\n            this.x = posX * global.scaleX + global.x;\r\n            this.y = posY * global.scaleY + global.y;\r\n            this.skewX = local.skewX + global.skewX;\r\n            this.skewY = local.skewY + global.skewY;\r\n            this.scaleX = local.scaleX * global.scaleX;\r\n            this.scaleY = local.scaleY * global.scaleY;\r\n            this.matrixUpdated = false;\r\n        }\r\n        else {\r\n            local.updateMatrix();\r\n            global.updateMatrix();\r\n            const m1 = local.matrix;\r\n            const m2 = global.matrix;\r\n            this.matrix.a = m1.a * m2.a + m1.b * m2.c;\r\n            this.matrix.c = m1.c * m2.a + m1.d * m2.c;\r\n            this.matrix.tx = m1.tx * m2.a + m1.ty * m2.c + m2.tx;\r\n            this.matrix.b = m1.a * m2.b + m1.b * m2.d;\r\n            this.matrix.d = m1.c * m2.b + m1.d * m2.d;\r\n            this.matrix.ty = m1.tx * m2.b + m1.ty * m2.d + m2.ty;\r\n            this.x = this.matrix.tx;\r\n            this.y = this.matrix.ty;\r\n            this.scaleX = Math.sqrt(this.matrix.a * this.matrix.a + this.matrix.b * this.matrix.b);\r\n            this.scaleY = Math.sqrt(this.matrix.c * this.matrix.c + this.matrix.d * this.matrix.d);\r\n            this.skewX = Math.atan2(-this.matrix.c, this.matrix.d);\r\n            this.skewY = Math.atan2(this.matrix.b, this.matrix.a);\r\n            this.matrixUpdated = true;\r\n        }\r\n        this.updateInfo();\r\n    }\r\n    copy(target) {\r\n        this.x = target.x;\r\n        this.y = target.y;\r\n        this.scaleX = target.scaleX;\r\n        this.scaleY = target.scaleY;\r\n        this.skewX = target.skewX;\r\n        this.skewY = target.skewY;\r\n        this.rotation = target.rotation;\r\n        this.matrixUpdated = false;\r\n        this.updateInfo();\r\n    }\r\n}\r\n","import Transform from \"./Transform\";\r\nclass Node {\r\n    constructor(id) {\r\n        this.transform = { local: new Transform(), global: new Transform(), globalTransformUpdated: false };\r\n        this.children = [];\r\n        this.hierarchy = [];\r\n        this.parent = null;\r\n        this.name = id || \"node\";\r\n        return this;\r\n    }\r\n    set x(value) {\r\n        if (this.transform.local.x !== value) {\r\n            this.transform.local.x = value;\r\n            this.transform.local.matrixUpdated = false;\r\n            this.poke();\r\n        }\r\n    }\r\n    get x() {\r\n        return this.transform.local.x;\r\n    }\r\n    set y(value) {\r\n        if (this.transform.local.y !== value) {\r\n            this.transform.local.y = value;\r\n            this.transform.local.matrixUpdated = false;\r\n            this.poke();\r\n        }\r\n    }\r\n    get y() {\r\n        return this.transform.local.y;\r\n    }\r\n    set scaleX(value) {\r\n        if (this.transform.local.scaleX !== value) {\r\n            this.transform.local.scaleX = value;\r\n            this.transform.local.matrixUpdated = false;\r\n            this.poke();\r\n        }\r\n    }\r\n    get scaleX() {\r\n        return this.transform.local.scaleX;\r\n    }\r\n    set scaleY(value) {\r\n        if (this.transform.local.scaleY !== value) {\r\n            this.transform.local.scaleY = value;\r\n            this.transform.local.matrixUpdated = false;\r\n            this.poke();\r\n        }\r\n    }\r\n    get scaleY() {\r\n        return this.transform.local.scaleY;\r\n    }\r\n    set skewX(value) {\r\n        if (this.transform.local.skewX !== value) {\r\n            this.transform.local.rotation = this.transform.local.skewY === this.transform.local.skewX ? this.transform.local.skewX : 0;\r\n            this.transform.local.skewX = value;\r\n            this.transform.local.matrixUpdated = false;\r\n            this.poke();\r\n        }\r\n    }\r\n    get skewX() {\r\n        return this.transform.local.skewX;\r\n    }\r\n    set skewY(value) {\r\n        if (this.transform.local.skewY !== value) {\r\n            this.transform.local.rotation = this.transform.local.skewY === this.transform.local.skewX ? this.transform.local.skewX : 0;\r\n            this.transform.local.skewY = value;\r\n            this.transform.local.matrixUpdated = false;\r\n            this.poke();\r\n        }\r\n    }\r\n    get skewY() {\r\n        return this.transform.local.skewY;\r\n    }\r\n    set rotation(value) {\r\n        const rotation = value % 360;\r\n        if (this.transform.local.rotation !== rotation) {\r\n            this.transform.local.skewX = this.transform.local.skewY = value * Math.PI / 180;\r\n            this.transform.local.rotation = rotation;\r\n            this.transform.local.matrixUpdated = false;\r\n            this.poke();\r\n        }\r\n    }\r\n    get rotation() {\r\n        return this.transform.local.rotation;\r\n    }\r\n    setPosition(x = 0, y) {\r\n        this.x = x;\r\n        this.y = y;\r\n    }\r\n    setScale(x = 1, y) {\r\n        y = y || x;\r\n        this.scaleX = x;\r\n        this.scaleY = y;\r\n    }\r\n    setSkew(x = 0, y) {\r\n        this.skewX = x;\r\n        this.skewY = y;\r\n    }\r\n    addChild(node) {\r\n        if (node.parent) {\r\n            node.parent.removeChild(node);\r\n        }\r\n        node.parent = this;\r\n        node.updateHierarchy();\r\n        this.children.push(node);\r\n        return node;\r\n    }\r\n    removeChild(node) {\r\n        for (let i = 0; i < this.children.length; i++) {\r\n            if (this.children[i] === node) {\r\n                this.children.splice(i, 1);\r\n            }\r\n        }\r\n        if (this.parent) {\r\n            this.parent.removeChild(node);\r\n        }\r\n        else {\r\n            node.parent = null;\r\n            node.updateHierarchy();\r\n        }\r\n    }\r\n    updateHierarchy() {\r\n        this.hierarchy.length = 0;\r\n        let node = this;\r\n        while (true) {\r\n            if (node.parent) {\r\n                node = node.parent;\r\n                this.hierarchy.unshift(node);\r\n            }\r\n            else {\r\n                break;\r\n            }\r\n        }\r\n        for (let i = 0; i < this.children.length; i++) {\r\n            this.children[i].updateHierarchy();\r\n        }\r\n        this.poke();\r\n    }\r\n    poke() {\r\n        this.transform.globalTransformUpdated = false;\r\n    }\r\n    updateHierarchyGlobalTransform() {\r\n        let poked = false;\r\n        for (let i = 0; i < this.hierarchy.length; i++) {\r\n            const node = this.hierarchy[i];\r\n            poked = poked || !node.transform.globalTransformUpdated;\r\n            node.updateGlobalTransform(poked);\r\n        }\r\n        return poked;\r\n    }\r\n    pokeChildren(poked) {\r\n        for (let i = 0; i < this.children.length; i++) {\r\n            const node = this.children[i];\r\n            poked = poked || !node.transform.globalTransformUpdated;\r\n            if (poked) {\r\n                node.poke();\r\n                node.pokeChildren(poked);\r\n            }\r\n        }\r\n    }\r\n    updateGlobalTransform(poked) {\r\n        poked = poked || !this.transform.globalTransformUpdated;\r\n        if (poked) {\r\n            this.updateTransformData();\r\n        }\r\n        return poked;\r\n    }\r\n    updateTransformData() {\r\n        if (this.parent) {\r\n            this.transform.global.concat(this.transform.local, this.parent.transform.global);\r\n        }\r\n        else {\r\n            this.transform.global.copy(this.transform.local);\r\n        }\r\n        this.transform.globalTransformUpdated = true;\r\n    }\r\n    kill() {\r\n        this.children.forEach(children => children.parent = null);\r\n        this.children.length = 0;\r\n        this.hierarchy.length = 0;\r\n        if (this.parent) {\r\n            this.parent.removeChild(this);\r\n        }\r\n        this.parent = null;\r\n    }\r\n}\r\nexport default Node;\r\n","import Node from \"./Node\";\r\nexport default class Sprite extends Node {\r\n    constructor(texture, frame) {\r\n        super(\"sprite\");\r\n        this.texture = null;\r\n        this.bounds = null;\r\n        this.anchor = { x: 0, y: 0 };\r\n        this.mesh = null;\r\n        this.display = { visible: true, alpha: 1 };\r\n        if (texture) {\r\n            this.setTexture(texture, frame);\r\n        }\r\n    }\r\n    set width(value) {\r\n        if (this.texture) {\r\n            this.scaleX = value / this.texture.rect.width;\r\n        }\r\n    }\r\n    get width() {\r\n        return this.texture ? this.texture.rect.width * this.scaleX : 0;\r\n    }\r\n    set height(value) {\r\n        if (this.texture) {\r\n            this.scaleY = value / this.texture.rect.height;\r\n        }\r\n    }\r\n    get height() {\r\n        return this.texture ? this.texture.rect.height * this.scaleY : 0;\r\n    }\r\n    set visible(value) {\r\n        this.display.visible = value;\r\n    }\r\n    get visible() {\r\n        return this.display.visible;\r\n    }\r\n    set alpha(value) {\r\n        this.display.alpha = Math.min(1, Math.max(0, value));\r\n    }\r\n    get alpha() {\r\n        return this.display.alpha;\r\n    }\r\n    set anchorX(value) {\r\n        this.anchor.x = Math.min(1, Math.max(0, value));\r\n        if (this.mesh) {\r\n            this.mesh.meshUpdated = false;\r\n        }\r\n    }\r\n    get anchorX() {\r\n        return this.anchor.x;\r\n    }\r\n    set anchorY(value) {\r\n        this.anchor.y = Math.min(1, Math.max(0, value));\r\n        if (this.mesh) {\r\n            this.mesh.meshUpdated = false;\r\n        }\r\n    }\r\n    get anchorY() {\r\n        return this.anchor.y;\r\n    }\r\n    setAnchor(x = 0, y) {\r\n        y = y || x;\r\n        this.anchorX = x;\r\n        this.anchorY = y;\r\n    }\r\n    setBlendMode(value) {\r\n        this.display.blend = value;\r\n    }\r\n    getBlendMode() {\r\n        return this.display.blend;\r\n    }\r\n    setTexture(img, frame) {\r\n        if (!this.texture) {\r\n            this.texture = {};\r\n        }\r\n        this.texture.img = img;\r\n        if (frame) {\r\n            this.setFrame(frame);\r\n        }\r\n        else {\r\n            this.setFrame({ x: 0, y: 0, width: img.width, height: img.height });\r\n        }\r\n    }\r\n    getTexture() {\r\n        return this.texture ? this.texture.img : null;\r\n    }\r\n    setFrame(rect) {\r\n        if (!this.texture) {\r\n            return;\r\n        }\r\n        this.texture.rect = rect;\r\n        if (this.mesh) {\r\n            this.mesh.meshUpdated = false;\r\n        }\r\n        if (this.bounds) {\r\n            this.bounds.boundsUpdated = false;\r\n        }\r\n    }\r\n    getMesh() {\r\n        this.updateMesh();\r\n        return this.mesh;\r\n    }\r\n    updateMesh() {\r\n        if (!this.texture) {\r\n            return;\r\n        }\r\n        if (!this.mesh) {\r\n            this.mesh = { meshUpdated: false };\r\n        }\r\n        if (!this.mesh.meshUpdated) {\r\n            const rect = this.texture.rect;\r\n            const offsetX = rect.width * this.anchor.x;\r\n            const offsetY = rect.height * this.anchor.y;\r\n            this.mesh.vertexes = [\r\n                -offsetX, offsetY,\r\n                rect.width - offsetX, offsetY,\r\n                rect.width - offsetX, -rect.height + offsetY,\r\n                -offsetX, -rect.height + offsetY\r\n            ];\r\n            const uv0 = rect.x / this.texture.img.width;\r\n            const uv1 = rect.y / this.texture.img.height;\r\n            const uv2 = (rect.x + rect.width) / this.texture.img.width;\r\n            const uv3 = (rect.y + rect.height) / this.texture.img.height;\r\n            this.mesh.uv = [uv0, uv1, uv2, uv1, uv2, uv3, uv0, uv3];\r\n            this.mesh.meshUpdated = true;\r\n        }\r\n    }\r\n    updateBounds() {\r\n        if (!this.visible || (this.bounds && this.bounds.boundsUpdated)) {\r\n            return;\r\n        }\r\n        if (this.texture) {\r\n            if (!this.bounds) {\r\n                this.bounds = { rect: { x: 0, y: 0, width: 0, height: 0 } };\r\n            }\r\n            const w = this.width;\r\n            const h = this.height;\r\n            const vec1X = Math.cos(this.transform.global.skewY) * w;\r\n            const vec1Y = Math.sin(this.transform.global.skewY) * w;\r\n            const vec2X = Math.cos(this.transform.global.skewX + Math.PI * 0.5) * h;\r\n            const vec2Y = Math.sin(this.transform.global.skewX + Math.PI * 0.5) * h;\r\n            const vec3X = vec1X + vec2X;\r\n            const vec3Y = vec1Y + vec2Y;\r\n            const minX = Math.min(0, Math.min(vec1X, Math.min(vec2X, vec3X)));\r\n            const minY = Math.min(0, Math.min(vec1Y, Math.min(vec2Y, vec3Y)));\r\n            const maxX = Math.max(0, Math.max(vec1X, Math.max(vec2X, vec3X)));\r\n            const maxY = Math.max(0, Math.max(vec1Y, Math.max(vec2Y, vec3Y)));\r\n            this.bounds.rect.x = this.transform.global.x + minX - vec3X * this.anchor.x;\r\n            this.bounds.rect.y = this.transform.global.y + minY - vec3Y * this.anchor.y;\r\n            this.bounds.rect.width = maxX - minX;\r\n            this.bounds.rect.height = maxY - minY;\r\n            this.bounds.boundsUpdated = true;\r\n        }\r\n    }\r\n    updateTransformData() {\r\n        super.updateTransformData();\r\n        if (this.bounds) {\r\n            this.bounds.boundsUpdated = false;\r\n        }\r\n    }\r\n    getBounds() {\r\n        let poked = this.updateHierarchyGlobalTransform();\r\n        poked = this.updateGlobalTransform(poked);\r\n        this.pokeChildren(poked);\r\n        this.updateBounds();\r\n        return this.bounds ? this.bounds.rect : null;\r\n    }\r\n}\r\n","import Node from \"./Node\";\r\nconst MAX_SPRITES = 100000;\r\nconst VERTEX_DATA_LENGTH = (4 + 4 + 3) * 4;\r\nconst INDEX_DATA_LENGTH = 6;\r\nexport default class Renderer {\r\n    constructor(canvas) {\r\n        this.vertexOffset = 0;\r\n        this.indexOffset = 0;\r\n        this.textures = {};\r\n        this.vs = null;\r\n        this.fs = null;\r\n        this.program = null;\r\n        this.vec2UniformLoc = null;\r\n        this.indexBuffer = null;\r\n        this.vertBuffer = null;\r\n        this.currentBlendMode = Renderer.BLEND_MODE.NORMAL;\r\n        this.blendModes = {};\r\n        this.canvas = canvas;\r\n        this.stage = new Node(\"stage\");\r\n        this.sceneWidth = this.canvas.width;\r\n        this.sceneHeight = this.canvas.height;\r\n        this.vertexData = new Float32Array(MAX_SPRITES * VERTEX_DATA_LENGTH);\r\n        this.indexData = new Uint16Array(MAX_SPRITES * INDEX_DATA_LENGTH);\r\n        for (let i = 0; i < MAX_SPRITES; i++) {\r\n            let index = i * INDEX_DATA_LENGTH;\r\n            let offset = i * 4;\r\n            this.indexData[index++] = offset;\r\n            this.indexData[index++] = offset + 3;\r\n            this.indexData[index++] = offset + 1;\r\n            this.indexData[index++] = offset + 2;\r\n            this.indexData[index++] = offset + 1;\r\n            this.indexData[index++] = offset + 3;\r\n        }\r\n        this.gl = this.createContext();\r\n        if (this.gl) {\r\n            this.blendModes[Renderer.BLEND_MODE.NORMAL] = [this.gl.ONE, this.gl.ONE_MINUS_SRC_ALPHA];\r\n            this.blendModes[Renderer.BLEND_MODE.ADD] = [this.gl.ONE, this.gl.ONE];\r\n            this.blendModes[Renderer.BLEND_MODE.MULTIPLY] = [this.gl.DST_COLOR, this.gl.ONE_MINUS_SRC_ALPHA];\r\n            this.gl.viewport(0, 0, this.sceneWidth, this.sceneHeight);\r\n            this.gl.clearColor(0, 0, 0, 1);\r\n            this.gl.enable(this.gl.BLEND);\r\n            this.gl.blendEquation(this.gl.FUNC_ADD);\r\n            this.gl.blendFunc(this.blendModes[Renderer.BLEND_MODE.NORMAL][0], this.blendModes[Renderer.BLEND_MODE.NORMAL][1]);\r\n            this.gl.disable(this.gl.DEPTH_TEST);\r\n            this.gl.disable(this.gl.CULL_FACE);\r\n            this.gl.disable(this.gl.STENCIL_TEST);\r\n            this.gl.pixelStorei(this.gl.UNPACK_PREMULTIPLY_ALPHA_WEBGL, true);\r\n            this.vertexShader = [\r\n                \"uniform vec2 uRatio;\",\r\n                \"attribute vec4 aPos;\",\r\n                \"attribute vec4 aTrans;\",\r\n                \"attribute vec3 aTex;\",\r\n                \"varying vec2 vTextureCoord;\",\r\n                \"varying float vAlpha;\",\r\n                \"void main() {\",\r\n                \"float a = (aTrans.x * cos(aTrans.w)) * uRatio.x;\",\r\n                \"float c = (aTrans.y * sin(-aTrans.z)) * -uRatio.x;\",\r\n                \"float b = (aTrans.x * sin(aTrans.w)) * -uRatio.y;\",\r\n                \"float d = (aTrans.y * cos(aTrans.z)) * uRatio.y;\",\r\n                \"float tx = aPos.z * uRatio.x - 1.0;\",\r\n                \"float ty = aPos.w * -uRatio.y + 1.0;\",\r\n                \"mat3 outMatrix = mat3(a, b, 0.0, c, d, 0.0, tx, ty, 1.0);\",\r\n                \"gl_Position = vec4(outMatrix * vec3(aPos.xy, 1.0), 1.0);\",\r\n                \"vTextureCoord = aTex.xy;\",\r\n                \"vAlpha = aTex.z;\",\r\n                \"}\",\r\n            ].join(\"\\n\");\r\n            this.fragmentShader = [\r\n                \"precision mediump float;\",\r\n                \"uniform sampler2D uImage;\",\r\n                \"uniform vec4 uClip;\",\r\n                \"varying vec2 vTextureCoord;\",\r\n                \"varying float vAlpha;\",\r\n                \"void main() {\",\r\n                \"gl_FragColor = texture2D(uImage, vTextureCoord) * vAlpha;\",\r\n                \"}\"\r\n            ].join(\"\\n\");\r\n            this.vs = this.gl.createShader(this.gl.VERTEX_SHADER);\r\n            this.gl.shaderSource(this.vs, this.vertexShader);\r\n            this.gl.compileShader(this.vs);\r\n            this.fs = this.gl.createShader(this.gl.FRAGMENT_SHADER);\r\n            this.gl.shaderSource(this.fs, this.fragmentShader);\r\n            this.gl.compileShader(this.fs);\r\n            this.program = this.gl.createProgram();\r\n            this.gl.attachShader(this.program, this.vs);\r\n            this.gl.attachShader(this.program, this.fs);\r\n            this.gl.linkProgram(this.program);\r\n            this.gl.useProgram(this.program);\r\n            this.vec2UniformLoc = this.gl.getUniformLocation(this.program, \"uRatio\");\r\n            this.gl.uniform2f(this.vec2UniformLoc, 2 / this.sceneWidth, 2 / this.sceneHeight);\r\n            const positionLocation = this.gl.getAttribLocation(this.program, \"aPos\");\r\n            this.gl.enableVertexAttribArray(positionLocation);\r\n            const texCoordLocation = this.gl.getAttribLocation(this.program, \"aTex\");\r\n            this.gl.enableVertexAttribArray(texCoordLocation);\r\n            this.matABCDCoordLocation = this.gl.getAttribLocation(this.program, \"aTrans\");\r\n            this.gl.enableVertexAttribArray(this.matABCDCoordLocation);\r\n            this.indexBuffer = this.gl.createBuffer();\r\n            this.gl.bindBuffer(this.gl.ELEMENT_ARRAY_BUFFER, this.indexBuffer);\r\n            this.gl.bufferData(this.gl.ELEMENT_ARRAY_BUFFER, this.indexData, this.gl.STATIC_DRAW);\r\n            this.vertBuffer = this.gl.createBuffer();\r\n            this.gl.bindBuffer(this.gl.ARRAY_BUFFER, this.vertBuffer);\r\n            this.gl.vertexAttribPointer(positionLocation, 4, this.gl.FLOAT, false, VERTEX_DATA_LENGTH, 0);\r\n            this.gl.vertexAttribPointer(this.matABCDCoordLocation, 4, this.gl.FLOAT, false, VERTEX_DATA_LENGTH, 16);\r\n            this.gl.vertexAttribPointer(texCoordLocation, 3, this.gl.FLOAT, false, VERTEX_DATA_LENGTH, 32);\r\n        }\r\n    }\r\n    resize(width, height) {\r\n        if (this.sceneWidth !== width || this.sceneHeight !== height) {\r\n            this.sceneWidth = this.canvas.width = width;\r\n            this.sceneHeight = this.canvas.height = height;\r\n            if (this.gl) {\r\n                this.gl.viewport(0, 0, this.sceneWidth, this.sceneHeight);\r\n                if (this.vec2UniformLoc) {\r\n                    this.gl.uniform2f(this.vec2UniformLoc, 2 / this.sceneWidth, 2 / this.sceneHeight);\r\n                }\r\n            }\r\n        }\r\n    }\r\n    createContext() {\r\n        const names = [\"webgl\", \"experimental-webgl\", \"moz-webgl\", \"webkit-3d\"];\r\n        let context = null;\r\n        for (let i = 0; i < names.length; i++) {\r\n            context = this.canvas.getContext(names[i], { alpha: false, premultipliedAlpha: false });\r\n            if (context) {\r\n                break;\r\n            }\r\n        }\r\n        return context;\r\n    }\r\n    addTexture(image) {\r\n        if (!image.id) {\r\n            console.warn(\"no texture id\", image);\r\n        }\r\n        if (!this.gl) {\r\n            console.warn(\"addTexture error: no webgl contex\");\r\n            return;\r\n        }\r\n        if (!this.textures[image.id]) {\r\n            const texture = this.gl.createTexture();\r\n            this.gl.bindTexture(this.gl.TEXTURE_2D, texture);\r\n            this.gl.texImage2D(this.gl.TEXTURE_2D, 0, this.gl.RGBA, this.gl.RGBA, this.gl.UNSIGNED_BYTE, image);\r\n            this.gl.texParameteri(this.gl.TEXTURE_2D, this.gl.TEXTURE_MAG_FILTER, this.gl.LINEAR);\r\n            this.gl.texParameteri(this.gl.TEXTURE_2D, this.gl.TEXTURE_MIN_FILTER, this.gl.LINEAR);\r\n            this.gl.texParameteri(this.gl.TEXTURE_2D, this.gl.TEXTURE_WRAP_S, this.gl.CLAMP_TO_EDGE);\r\n            this.gl.texParameteri(this.gl.TEXTURE_2D, this.gl.TEXTURE_WRAP_T, this.gl.CLAMP_TO_EDGE);\r\n            this.textures[image.id] = texture;\r\n        }\r\n        else {\r\n            this.gl.bindTexture(this.gl.TEXTURE_2D, this.textures[image.id]);\r\n        }\r\n    }\r\n    present() {\r\n        if (!this.gl) {\r\n            return;\r\n        }\r\n        for (let i = 0; i < this.stage.children.length; i++) {\r\n            this.draw(this.stage.children[i]);\r\n        }\r\n        this.drawTriangles();\r\n    }\r\n    draw(sprite, alpha, blend, poked) {\r\n        if (!sprite.visible) {\r\n            return;\r\n        }\r\n        alpha = (alpha || 1) * sprite.alpha;\r\n        blend = sprite.getBlendMode() || blend || Renderer.BLEND_MODE.NORMAL;\r\n        poked = sprite.updateGlobalTransform(poked);\r\n        const texture = sprite.getTexture();\r\n        if (texture) {\r\n            if (this.currentTexture !== texture) {\r\n                this.drawTriangles();\r\n                this.addTexture(texture);\r\n                this.currentTexture = texture;\r\n            }\r\n            if (this.indexOffset >= this.indexData.length) {\r\n                this.drawTriangles();\r\n            }\r\n            if (this.currentBlendMode !== blend) {\r\n                this.drawTriangles();\r\n                if (this.blendModes[blend]) {\r\n                    this.currentBlendMode = blend;\r\n                }\r\n                else {\r\n                    console.warn(`blend mode error: \\\"${blend}\\\" is not valid blend mode.`);\r\n                    this.currentBlendMode = Renderer.BLEND_MODE.NORMAL;\r\n                }\r\n                const blendMode = this.blendModes[this.currentBlendMode];\r\n                if (blendMode.length > 2) {\r\n                    this.gl.blendFuncSeparate(blendMode[0], blendMode[1], blendMode[2], blendMode[3]);\r\n                }\r\n                else {\r\n                    this.gl.blendFunc(blendMode[0], blendMode[1]);\r\n                }\r\n            }\r\n            const mesh = sprite.getMesh();\r\n            const vertexes = mesh.vertexes;\r\n            const uv = mesh.uv;\r\n            const tr = sprite.transform.global;\r\n            for (let i = 0; i < vertexes.length; i += 2) {\r\n                this.vertexData[this.vertexOffset++] = vertexes[i];\r\n                this.vertexData[this.vertexOffset++] = vertexes[i + 1];\r\n                this.vertexData[this.vertexOffset++] = tr.x;\r\n                this.vertexData[this.vertexOffset++] = tr.y;\r\n                this.vertexData[this.vertexOffset++] = tr.scaleX;\r\n                this.vertexData[this.vertexOffset++] = tr.scaleY;\r\n                this.vertexData[this.vertexOffset++] = tr.skewX;\r\n                this.vertexData[this.vertexOffset++] = tr.skewY;\r\n                this.vertexData[this.vertexOffset++] = uv[i];\r\n                this.vertexData[this.vertexOffset++] = uv[i + 1];\r\n                this.vertexData[this.vertexOffset++] = alpha;\r\n            }\r\n            this.indexOffset += INDEX_DATA_LENGTH;\r\n        }\r\n        for (let i = 0; i < sprite.children.length; i++) {\r\n            this.draw(sprite.children[i], alpha, blend, poked);\r\n        }\r\n    }\r\n    drawTriangles() {\r\n        if (!this.gl) {\r\n            return;\r\n        }\r\n        if (this.indexOffset > 0) {\r\n            this.gl.bufferData(this.gl.ARRAY_BUFFER, this.vertexData.subarray(0, this.vertexOffset), this.gl.STATIC_DRAW);\r\n            this.gl.drawElements(this.gl.TRIANGLES, this.indexOffset, this.gl.UNSIGNED_SHORT, 0);\r\n        }\r\n        this.vertexOffset = 0;\r\n        this.indexOffset = 0;\r\n    }\r\n}\r\nRenderer.BLEND_MODE = {\r\n    NORMAL: \"normal\",\r\n    ADD: \"add\",\r\n    MULTIPLY: \"multiply\"\r\n};\r\n","export default class Timer {\r\n    constructor(cb) {\r\n        this.onEnterFrame = cb;\r\n        this.oldTime = Date.now();\r\n        return this;\r\n    }\r\n    start() {\r\n        this.oldTime = Date.now();\r\n        this.onRequestAnimationFrame();\r\n    }\r\n    stop() {\r\n        cancelAnimationFrame(this.requestAnimationFrameId);\r\n    }\r\n    onRequestAnimationFrame() {\r\n        const delta = Date.now() - this.oldTime;\r\n        this.requestAnimationFrameId = requestAnimationFrame(this.onRequestAnimationFrame.bind(this));\r\n        this.oldTime += delta;\r\n        this.onEnterFrame(delta);\r\n    }\r\n}\r\n"],"names":["Transform","[object Object]","this","x","y","scaleX","scaleY","skewX","skewY","rotation","matrix","a","b","c","d","tx","ty","matrixUpdated","equalScale","noScale","equalSkew","noSkew","Math","cos","sin","local","global","posX","posY","updateMatrix","m1","m2","sqrt","atan2","updateInfo","target","Node","id","transform","globalTransformUpdated","children","hierarchy","parent","name","value","poke","PI","node","removeChild","updateHierarchy","push","i","length","splice","unshift","poked","updateGlobalTransform","pokeChildren","updateTransformData","concat","copy","forEach","Sprite","texture","frame","super","bounds","anchor","mesh","display","visible","alpha","setTexture","width","rect","height","min","max","anchorX","meshUpdated","anchorY","blend","img","setFrame","boundsUpdated","updateMesh","offsetX","offsetY","vertexes","uv0","uv1","uv2","uv3","uv","w","h","vec1X","vec1Y","vec2X","vec2Y","vec3X","vec3Y","minX","minY","maxX","maxY","updateHierarchyGlobalTransform","updateBounds","Renderer","canvas","vertexOffset","indexOffset","textures","vs","fs","program","vec2UniformLoc","indexBuffer","vertBuffer","currentBlendMode","BLEND_MODE","NORMAL","blendModes","stage","sceneWidth","sceneHeight","vertexData","Float32Array","MAX_SPRITES","indexData","Uint16Array","index","offset","gl","createContext","ONE","ONE_MINUS_SRC_ALPHA","ADD","MULTIPLY","DST_COLOR","viewport","clearColor","enable","BLEND","blendEquation","FUNC_ADD","blendFunc","disable","DEPTH_TEST","CULL_FACE","STENCIL_TEST","pixelStorei","UNPACK_PREMULTIPLY_ALPHA_WEBGL","vertexShader","join","fragmentShader","createShader","VERTEX_SHADER","shaderSource","compileShader","FRAGMENT_SHADER","createProgram","attachShader","linkProgram","useProgram","getUniformLocation","uniform2f","positionLocation","getAttribLocation","enableVertexAttribArray","texCoordLocation","matABCDCoordLocation","createBuffer","bindBuffer","ELEMENT_ARRAY_BUFFER","bufferData","STATIC_DRAW","ARRAY_BUFFER","vertexAttribPointer","FLOAT","names","context","getContext","premultipliedAlpha","image","console","warn","bindTexture","TEXTURE_2D","createTexture","texImage2D","RGBA","UNSIGNED_BYTE","texParameteri","TEXTURE_MAG_FILTER","LINEAR","TEXTURE_MIN_FILTER","TEXTURE_WRAP_S","CLAMP_TO_EDGE","TEXTURE_WRAP_T","draw","drawTriangles","sprite","getBlendMode","getTexture","currentTexture","addTexture","blendMode","blendFuncSeparate","getMesh","tr","subarray","drawElements","TRIANGLES","UNSIGNED_SHORT","Timer","cb","onEnterFrame","oldTime","Date","now","onRequestAnimationFrame","cancelAnimationFrame","requestAnimationFrameId","delta","requestAnimationFrame","bind"],"mappings":"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"}